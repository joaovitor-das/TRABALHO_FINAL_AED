/*Projeto Final de AED;
UnB - Univerisdade de Brasilia;
Professor: Vinicius;
Alunos: Joao Vitor da Silva - 17/0106501
Joao Vitor Fonseca de Lima - 17/0014118
Avaliação de Funcionario
Ultima modificação: 28/11/2018 - 15:22*/
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <iomanip>
#include <cstdio>

using namespace std;

double stn(string num, double &x){  //função global que converte uma string para um numero;
stringstream conv(num);
	if(!(conv >> x ))
	x = 0;
	return x;
}

string nts( double a, string &b){  			//função global que converte um numero para uma string;
	stringstream conv;
	conv << a;
	b = conv.str();
	return b;
}
   
bool procura(string a, string b){ 			//função que busca uma palavra em uma linha de string;
	  	size_t found = a.find(b);
  	if (found == std::string::npos){
 	   	 return false;
 	}
  		else { 
		 return true;
	}
}

void empresas(string empresa){  			//serve para atualizar e inicializar a lista de empresas cadastradas no programa;
	fstream file("Empresas",ios::app);
	file << empresa << endl;
	file.close();
	fstream outfile(empresa.c_str(),ios::app);
	outfile <<"";
	outfile.close();
}

bool existe(string procura){ 				//verifica se a empresa existe;
	vector<string> all;
	vector<string>::iterator ix;
	string vazia;
	ifstream emp("Empresas");
	while(!emp.eof()){
		getline(emp,vazia);
		all.push_back(vazia);
	}
	for(ix=all.begin();ix!=all.end();ix++){
		if(*ix == procura){
			return true;
		}
	}
	return false;
}
void lista(){  								// Faz uma lista das empresas existentes, para orientar o usuario na hora de selecionar;
	vector<string> all;
	vector<string>::iterator ix;
	string vazia;
	ifstream emp("Empresas");
	while(!emp.eof()){
		getline(emp,vazia);
		all.push_back(vazia);
	}
	for(ix=all.begin();ix!=all.end();ix++){
		cout <<*ix<<endl;
	}
	
}
void insertion_sort2(std::vector<double> &vetor) { 	// algoritmo de ordenação em ordem crescente

    for (int i = 1; i < vetor.size(); i++) {
		double escolhido = vetor[i];
		double j = i - 1;
		
		while ((j >= 0) && (vetor[j] < escolhido)) {
			vetor[j + 1] = vetor[j];
			j--;
		}
		
		vetor[j + 1] = escolhido;
	}
}
void insertion_sort1(std::vector<double> &vetor) {	// algoritmo de ordenação em ordem decrescente

    for (int i = 1; i < vetor.size(); i++) {
		double escolhido = vetor[i];
		double j = i - 1;
		
		while ((j >= 0) && (vetor[j] > escolhido)) {
			vetor[j + 1] = vetor[j];
			j--;
		}
		
		vetor[j + 1] = escolhido;
	}
}
	bool id_valida(string empresa, string id){
		vector<string> dados;
		vector<string>::iterator it;
		string aux;
		ifstream file(empresa.c_str());
		while(!file.eof()){
			getline (file, aux);
			dados.push_back(aux);
		}
		for (it=dados.begin();it!=dados.end();it++){
			if(procura(*it, id)== true){
				return true;
			}
		}
		return false;
	}
	void procuraid(string empresa, string id){
			vector<string> dados;
		vector<string>::iterator it;
		vector<string> x;
		string aux, aux1;
		string base = "" + empresa + "_AV";
		ifstream file(empresa.c_str());
		while(!file.eof()){
			getline (file, aux);
			dados.push_back(aux);
		}
		for (it=dados.begin();it!=dados.end();it++){
			if(procura(*it, id)== true){
				cout << *it << endl;
				it++;
				cout << "NOTA: "<< *it << endl;
			}
		}
		cout << "Agora, segue todos os comentarios a respeito desse funcionario" << endl;
		ifstream file2(base.c_str());
		if(file2.is_open()==true){
			while(!file2.eof()){
				getline(file2,aux1);
				x.push_back(aux1);
			}
			file2.close();
			for(it=x.begin();it!=x.end();it++){
				if(procura(*it,id)==true){
					cout << *it << endl;
				}
			}
	}
}
void rehabilitacao(string empresa){
	vector<string> dados;
	vector<double> notas;
	vector<double>::iterator it;
	vector<string> dadosaux;
	vector<string>::iterator ix;
	string aux;
	double a;
	a = 0.0;
	ifstream file(empresa.c_str());
	while(!file.eof()){
		getline(file,aux);
		dados.push_back(aux);
}	
	for (ix=dados.begin();ix!=dados.end();ix++){
		if (procura(*ix, "-")==true || *ix==""){
		}else{
			aux = *ix;
			stn(aux, a);
			if (a<=3.5){
				notas.push_back(a);
			}
	}
}	
	insertion_sort1(notas);
	cout << "Lista de Reabilitação: " << endl;
	for(it=notas.begin();it!=notas.end();it++){
		a=*it;
		nts(a, aux);
			for(ix=dados.begin();ix!=dados.end();ix++){
				if(procura(*ix, aux)==true){
					ix--;
					cout << *ix << endl;
					ix++;
					cout << *ix << endl;
				}
			}
	}
}
void funcionario_do_mes(string empresa){
	vector<string> dados;
	vector<double> notas;
	vector<double>::iterator it;
	vector<string> dadosaux;
	vector<string>::iterator ix;
	string aux;
	double a;
	a = 0.0;
	ifstream file(empresa.c_str());
	while(!file.eof()){
		getline(file,aux);
		dados.push_back(aux);
}	
	for (ix=dados.begin();ix!=dados.end();ix++){
		if (procura(*ix, "-")==true || *ix==""){
		}else{
			aux = *ix;
			stn(aux, a);
			if (a>=4.5){
				notas.push_back(a);
			}
	}
}	
	insertion_sort2(notas);
	cout << "Lista de Candidatos a Funcionario do Mes: " << endl;
	for(it=notas.begin();it!=notas.end();it++){
		a=*it;
		nts(a, aux);
			for(ix=dados.begin();ix!=dados.end();ix++){
				if(procura(*ix, aux)==true){
					ix--;
					cout << *ix << endl;
					ix++;
					cout << *ix << endl;
				}
			}
	}
}
	

	
class usuario{         //classe usuario, serve para oriente todo o processo de cadastro de funcionario e suas respectivas 
	public:
	string nome,id,setor,idade,avalia;
	void add( string empresa,string nome, string setor, string idade, string id, string nota){
		double k;
		fstream outfile (empresa.c_str(),ios::app);  //Criamos o arquivo com o nome da empresa, assim cada empresa tera seus arquivos com cada funcionario;
			outfile << "- " <<id << " |"<< "Nome: " << nome << " |Setor: " << setor << "|Idade: " << idade << endl;
			outfile << nota << endl;
			outfile.close();
	}
	
	void identifica(string empresa, string nome,string &id){  //aqui foi usado o metodo de tabela Hash, para criar um codigo de cada funcionario;
		int i; 
		i = (empresa.size() + empresa[0] + nome.size()) + (nome[nome.size()-1] + nome[nome.size()-2]);
		while(i>999){
			i = i-nome[1];
		}
		while(i<100){
			i = i+nome[1];
		}
		nts(i,id);
	}
	void excluir(string empresa, string parametro){  //função que retira um funcionario da empresa em que o mesmo esta cadastrada;
		vector <string> ex;
		vector <string>::iterator it;
		string aux;
		ifstream file(empresa.c_str());
		while(!file.eof()){
			getline(file,aux);
			ex.push_back(aux);
		}
		file.close();
		for(int i=0;i<ex.size();i++){
			if(procura(ex[i], parametro)==true){
				ex[i] = "";
				ex[i+1] = "";
			}
		}
		ofstream newfile(empresa.c_str());
		for(it = ex.begin();it!=ex.end();it++){
			newfile << *it << endl;
			
		}
	}
	bool valido(string empresa, string nome){  					//verifica se um funcionario esta validado(cadastrado) na empresa q qual ele pertence;
		vector <string> ex;
		vector <string>::iterator it;
		string aux;
		ifstream file(empresa.c_str());
		while(!file.eof()){
			getline(file,aux);
			ex.push_back(aux);
		}
		file.close();
		for(it = ex.begin();it!=ex.end();it++){
			if(procura(*it, nome)==true){
				return true;
			}
		}
		return false;
	}
	double get_nota(string nome, string empresa){ 			 //função que pega a nota do funcionario 
		vector <string> ex;
		vector <string>::iterator it;
		string aux;
		double nota;
		ifstream file(empresa.c_str());
		while(!file.eof()){
			getline(file,aux);
			ex.push_back(aux);
		}
		for(int i=0;i<ex.size();i++){
			if(procura(ex[i],nome)==true){
				stn(ex[i+1],nota);
			}
		}
		return nota;
	} 
	double get_notaid(string id, string empresa){ 			 //função que pega a nota do funcionario 
		vector <string> ex;
		vector <string>::iterator it;
		string aux;
		double nota;
		ifstream file(empresa.c_str());
		while(!file.eof()){
			getline(file,aux);
			ex.push_back(aux);
		}
		for(int i=0;i<ex.size();i++){
			if(procura(ex[i],id)==true){
				stn(ex[i+1],nota);
			}
		}
		return nota;
	} 
	void set_nota(string empresa, string nome, string novanota){  //funçao que muda a nota do usuario apos o mesmo resceber uma nova nota;
		vector <string> ex;
		vector <string>::iterator it;
		string aux, velhanota;
		usuario c;
		double velha;
		double nova;
		ifstream file(empresa.c_str());
		while(!file.eof()){
			getline(file,aux);
			ex.push_back(aux);
		}
		file.close();
		stn(novanota,nova);
		velha = c.get_nota(nome,empresa);
		nova = ((nova+velha)/2);
		nts(nova,novanota);
		nts(velha,velhanota);
		cout << "VELHA: " << velhanota << "|NOVA: " << novanota;
		for(int i =0;i<ex.size();i++){
			if(procura(ex[i], nome)==true){
				ex[i+1] = novanota;
			}
		}
		ofstream newfile(empresa.c_str());
		for(it = ex.begin();it!=ex.end();it++){
			newfile << *it << endl;
		}
		newfile.close();
		
	}
	void set_notaid(string empresa, string id, string novanota){  //funçao que muda a nota do usuario apos o mesmo resceber uma nova nota;
		vector <string> ex;
		vector <string>::iterator it;
		string aux, velhanota;
		usuario c;
		double velha;
		double nova;
		ifstream file(empresa.c_str());
		while(!file.eof()){
			getline(file,aux);
			ex.push_back(aux);
		}
		file.close();
		stn(novanota,nova);
		velha = c.get_notaid(id ,empresa);
		nova = ((nova+velha)/2);
		nts(nova,novanota);
		nts(velha,velhanota);
		cout << "VELHA: " << velhanota << "|NOVA: " << novanota << endl;
		for(int i =0;i<ex.size();i++){
			if(procura(ex[i], id)==true){
				ex[i+1] = novanota;
			}
		}
		ofstream newfile(empresa.c_str());
		for(it = ex.begin();it!=ex.end();it++){
			newfile << *it << endl;
		}
		newfile.close();
	}
	void set_avalia(string avaliacao, string empresa, string nome){  //função usada para a avaliação do funcionario;
		string nova = "" + empresa + "_AV" ;
		usuario b;
		string id;
		b.identifica(empresa,nome, id);
		fstream file(nova.c_str(), ios::app);
		file  << id << " |Avaliação -> " << avaliacao<< endl;
		file.close();	
	}
	void set_avaliaid(string avaliacao, string empresa, string id){
		string aux = "" + empresa + "_AV" ;
		fstream file(aux.c_str(), ios::app);
		file << id << " |Avaliação -> " << avaliacao << endl;
		file.close();
		}
	void search(string nome, string empresa){  //aqui se busca a avaliação do funcionario, alem de sua respectiva nota;
		vector <string> ex, x;
		vector <string> plus;
		vector <string>::iterator it;
		usuario c;
		int k;
		string aux;
		string id;
		string base = "" + empresa + "_AV";
		ifstream file(empresa.c_str());
		while(!file.eof()){
			getline(file,aux);
			ex.push_back(aux);
		}
		file.close();
		for(int i = 0;i<ex.size();i++){
			if(procura(ex[i],nome)==true){
				cout << ex[i]<< endl;
				cout << "Nota: " <<ex[i+1] << endl;
				k++;
			}
		}
		if(k>1){
			cout << "Indentificamos que existem mais de um funcionario com esse nome, selecione o ID do funcionario correnpondente: " << endl;
			cin>> id;
		}else if(k == 1){
		c.identifica(empresa,nome,id);
		}
		cout << "Agora, segue todas as reclamações desse funcionario" << endl;
		ifstream file2(base.c_str());
		if(file2.is_open()==true){
			while(!file2.eof()){
				getline(file2,aux);
				x.push_back(aux);
			}
			file2.close();
			for(it=x.begin();it!=x.end();it++){
				if(procura(*it,id)==true){
					cout << *it << endl;
				}
			}
		}else{
			cout << "Nao há avaliações dessa empresa ainda" << endl;
		}
	}	

	void all(string empresa){ //lista de todos os funcionario cadastrados em uma x empresa;
		vector <string> x;
		vector <string>::iterator it;
		string aux;
		ifstream file(empresa.c_str());
		while(!file.eof()){
			getline(file,aux);
			x.push_back(aux);
		}
		file.close();
		for(it=x.begin();it!=x.end();it++){
			cout << *it << endl;
		}
	}
	void dg(string empresa, double &m){ //calcula a media geral de uma x empresa;
		vector <double> x;
		vector <string> g;
		vector <double>::iterator it;
		string aux; 
		string b="-";
		string base ="" + empresa + "_AV";;
		double a,j;
		ifstream file(empresa.c_str());
		while(!file.eof()){
			getline(file,aux);
			if(procura(aux,b)==true||aux == ""){
			}else{
			stn(aux,a);	
			x.push_back(a);
			}
		}
		file.close();
		j = x.size();
		for(int i=0;i<x.size();i++){
			m = m + x[i];
		}
		m = m/j;
	}
	void bbe(string empresa){
		remove(empresa.c_str());
		string base = ""+empresa+"_AV";
		remove(base.c_str());
		vector <string> busca;
		vector <string>::iterator b;
		string aux;
		ifstream file("Empresas");
		while(!file.eof()){
			getline(file,aux);
			if(procura(aux,empresa)==true){
			}else{
				busca.push_back(aux);
			}
		}
		file.close();
		ofstream file2("Empresas");
		for(b=busca.begin();b!=busca.end();b++){
			file2 << *b << endl;
		}
		file2.close();
	}
};

int main(){
	usuario a; 
	int op = 78,sai=0,op2=0,n=0, total, escolha;
	double media, media2;
	string sen1;
	string empresa, sel, vazia,novanota, id1;
	string in = "5.0"; //suporte para inicializar todas as notas quando criado o funcionario;
	string senha = "admin";
	vector<string> coletor;
	vector<string>::iterator ix;
	/*processos para começar o programa*/
	fstream emp("Empresas",ios::app);
	emp << "";
	emp.close();
	cout << setprecision(1);
	cout << fixed;
	setlocale(LC_ALL,"Portuguese");
	while(op!=5){
		cout << "\t\tMenu" << endl;
		cout << "1 => Avaliar Funcionario." << endl;
		cout << "2 => Buscar Funcionario." << endl;
		cout << "3 => Listagem de Funcionarios (Por empresa)." << endl;
		cout << "4 => Dados Estatisticos." << endl;
		cout << "5 => Para sair do programa;" << endl;
		cin >> op;
		while(op > 5 || op < -1){
		cout << "Voce digitou um numero que nao esta fora do menu, digite novamente" << endl;
		cin >> op;
		}
		switch(op){
			case 0:
			system("cls");
			cout << "Digite a senha para entrar na area de administrador" << endl;
			cin >> sen1;
			while(sen1 != senha){
				if(sai == 3){
					return 0;
				}
				cout << "Ops! Parece que voce esqueceu a senha, tente navamente, \n mas lembre-se  voce so pode tentar 3 vezes" << endl;
				cin>> sen1;
				sai++;
				
			}
				system("cls");
				cout << "Cadastra empresa?(digite apensar sim ou nao)" << endl;
				cin >> sel;
				if(sel == "sim"){
					cout << "Digite o nome da empresa: " << endl;
					fflush(stdin);
					getline(cin,empresa);
					empresas(empresa);
				}else if(sel=="nao"){
					cout << "Digite o nome da empresa que deseja alterar: " << endl;
					fflush(stdin);
					getline(cin,empresa);
					while(existe(empresa)!=true){
						cout << "Opa Parece que voce digitou uma empresa fora da lista existente, digite de novo" << endl;
						fflush(stdin);
					getline(cin,empresa);
					}
				}
				system("cls");
				cout << "BEM VINDO AO PAINEL DE CONTROLE DA " << empresa << endl;
				cout << "1-> Adicionar Funcionarios"<< endl;
				cout << "2-> Remover Funcionarios" << endl;
				cout << "3-> Lista de Funcionarios com media baixa" << endl;
				cout << "4-> Candidatos a Funcionario do mes" << endl;
				cout << "5-> Excluir empresa" << endl;
				cin >> op2;
				switch(op2){
					case 1:
						system("cls");
						cout << "Bem vindo, primeiramente digite o numero de funcionarios que deseja adicionar: ";
						cin >> n;
						for(int i=0;i<n;i++){
							system("cls");
							cout << "Nome: ";
							fflush(stdin);
							getline(cin,a.nome);
							cout <<"Idade: ";
							cin>>a.idade;
							cout <<"Setor: ";
							fflush(stdin);
							getline(cin,a.setor);
							a.identifica(empresa,a.nome,a.id);
							a.add(empresa,a.nome,a.setor,a.idade,a.id,in);
						}
						break;
					case 2:
						system("cls");
						cout << "Digite o numero de funcionario que deseja retirar: ";
						cin >> n;
						for(int i=0;i<n;i++){
							system("cls");
							cout << "Nome: ";
							fflush(stdin);
							getline(cin,a.nome);
							a.excluir(empresa,a.nome);
						}
						
						break;
					case 3:
						system("cls");
						rehabilitacao(empresa);
						break;
					case 4:
						system("cls");
						funcionario_do_mes(empresa);
						break;
					case 5:
						system("cls");
						a.bbe(empresa);
						break;
				}
				break;
			case 1:
				system("cls");
				cout << "Ola, temos cadastrados em nossos bancos as seguintes empresas: " <<endl;
				lista();
				cout << "Escolha a empresa que o funcionario que deseja avaliar trabalha" << endl;
				fflush(stdin);
				getline(cin,empresa);
				while(existe(empresa)!=true){
					cout << "Opa Parece que voce digitou uma empresa fora da lista existente, digite de novo" << endl;
					fflush(stdin);
					getline(cin,empresa);
				}
				system("cls");
				cout << "Voce sabe qual é o:" << endl;
				cout << "1. Nome completo do funcionario(a) " << endl;
				cout << "2. id" << endl;
				cin >> escolha;
				if (escolha==1){
				cout << "Digite o nome do funcionario: ";
				fflush(stdin);
				getline(cin,a.nome);
				while(a.valido(empresa,a.nome)!= true){
					cout << "Usuario nao encontrado, tente novamente: " << endl;
					fflush(stdin);
					getline(cin,a.nome);
				}
				cout << "Usuario encontrado, digite sua avaliação: " << endl;
				fflush(stdin);
				getline(cin,a.avalia);
				a.set_avalia(a.avalia,empresa,a.nome);
				system("cls");
				cout << "Agora avalie o funcionario com uma nota de 0 a 5"<< endl;
				cin>> novanota;
				a.set_nota(empresa,a.nome,novanota);
			}
			system("cls");
				if (escolha==2){
					cout << "Digite a id do funcionario:" << endl;
					fflush(stdin);
					getline(cin, id1);
					if (id_valida(empresa, id1)!=true){
						cout << "A id não existe nos nossos bancos de dados, tente novamente: " << endl;
						fflush(stdin);
						getline(cin, id1);
					}
					cout << "Usuario encontrado, digite sua avaliação: " << endl;
						fflush(stdin);
						getline(cin, a.avalia);
						a.set_avaliaid(a.avalia, empresa, id1);
						system("cls");
					cout << "Agora avalie o funcionario com uma nota de 0 a 5"<< endl;
					cin>> novanota;	
					a.set_notaid(empresa, id1, novanota);
				}
				break;
			case 2:
				system("cls");
				cout << "Ola, temos cadastrados em nossos bancos as seguintes empresas: " <<endl;
				lista();
				cout << "Digite o nome da empresa em que está o funcionario: " << endl;
				fflush(stdin);
				getline(cin,empresa);
				while(existe(empresa)!=true){
					cout << "Opa Parece que voce digitou uma empresa fora da lista existente, digite de novo" << endl;
					fflush(stdin);
					getline(cin,empresa);
				}
				cout << "Voce quer procurar o funcionario pelo: " << endl;
				cout << "1. Nome" << endl;
				cout << "2. id" << endl;
				cin >> escolha;
				if (escolha != 1 && escolha !=2){
					cout << "ops, escolha uma alternativa entre 1 e 2" << endl;
					cin >> escolha;
				}
				if (escolha == 1){
				system("cls");
				cout << "Digite o nome completo do funcionario(a):" << endl;
				fflush(stdin);
				getline(cin,a.nome);
				a.search(a.nome,empresa);
			}
				if (escolha == 2){
					cout << "Digite a id do funcionario(a): " << endl;
					fflush(stdin);
					getline(cin, id1);
					if (id_valida(empresa, id1) == true){
						procuraid(empresa, id1);
					}
				
					
				}
				break;
			case 3:
				system("cls");
				cout << "Ola, temos cadastrados em nossos bancos as seguintes empresas: " <<endl;
				lista();
				cout << "Digite o nome da empresa" << endl;
				fflush(stdin);
				getline(cin,empresa);
				a.all(empresa);
				break;
			case 4:
				system("cls");
				cout << "Ola, temos cadastrados em nossos bancos as seguintes empresas: " <<endl;
				lista();
				cout << "Digite o nome da empresa que deseja obter informações: ";
				fflush(stdin);
				getline(cin,empresa);
				while(existe(empresa)!=true){
					cout << "Opa Parece que voce digitou uma empresa fora da lista existente, digite de novo" << endl;
					fflush(stdin);
					getline(cin,empresa);
				}
				a.dg(empresa, media);
				cout << "A media total de acordo com as notas é de: " << media << endl;
				break;
			case 5:
				return 0;
				break;
		}
	}
}

